#include "banco.h"
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>

int num_cadastros = 0;
Cliente cadastro[MAX_CADASTROS];

void inicio (){
  /*A função inicio() apresenta as saudações ao usuário e marca o começo do software*/

  printf("Seja bem vindo ao Banco QuemPoupaTem!\n\n");
}

void menu(){
  /*A função menu() apresenta o menu em um loop infinito, até que o usuário opte por sair, digitando 0*/

  printf("Abaixo, você poderá selecionar a operação que deseja seguir em seu programa conforme o seu número correspondente\n\n");
  int operacao = 8; /*Iniciando a variável com uma opção não válida para caso o usuário não selecionar nenhuma das opções, mão colher nenhum lixo de memmória e informar que é necessário escolher algo válido para prosseguir*/

  do{
    printf("1. Novo cliente\n");
    printf("2. Apaga cliente\n");
    printf("3. Listar clientes\n");
    printf("4. Débito\n");
    printf("5. Depósito\n");
    printf("6. Extrato\n");
    printf("7. Transferência entre contas\n");
    printf("0. Sair\n\n");

    printf("Digite o número da operação desejada: ");
    scanf(" %d", &operacao);
    printf("\n");
    int c;
    while ((c = getchar()) != '\n' && c != EOF);  /* Limpa o buffer de entrada, pois será preciso para não atrapalhar na execução das demais funções no programa */

    switch(operacao){
      case 1:
        novo_cliente();
          printf("\n");
      break;

      case 2:
        apaga_cliente();
          printf("\n");
      break;

      case 3:
        listar_clientes();
          printf("\n");
      break;

      case 4:
        debito();
          printf("\n");
      break;

      case 5:
        deposito();
          printf("\n");
      break;

      case 6:
       extrato();
          printf("\n");
      break;

      case 7:
        transferencia();
          printf("\n");
      break;

      case 0:
        printf("Obrigado por utilizar os serviços do Banco QuemPoupaTem!\n");
      break;

      default:
        printf("Por favor, escolha uma operação válida\n\n");
    }

  } while (operacao != 0);
}

int novo_cliente(){
  printf("NOVO CLIENTE\n\n");
  printf("Informe a abaixo as informações a respeito do cliente\n\n");
  
  if(num_cadastros >= MAX_CADASTROS) { /*Caso o número de cadastros tenha atingido o limite, não será possível prosseguir com o cadastro*/
    printf("Não é possível cadastrar mais clientes. Limite atingido.\n\n");
    return -1;
}
  
  char nome[50]; /*Nome de até 49 caracteres*/
  char cpf[12]; /*CPF de 11 caracteres*/
  char conta[6]; /*Char que irá armazenar contas Plus ou Comum*/
  double saldo; /*Variável saldo que suporta um número de até 64 bits*/
  char senha[11]; /*Senha de até 10 caracteres*/
  char buffer[50]; /*Buffer temporário para leitura*/
  
  printf("Digite o nome: ");
  fgets(nome, sizeof(nome), stdin);
  nome[strcspn(nome, "\n")] = 0; /*Remove a nova linha no final, se houver*/

  printf("Digite o CPF: ");
  fgets(buffer, sizeof(buffer), stdin);
  buffer[strcspn(buffer, "\n")] = 0;  /*Remove a nova linha no final, se houver*/
  strcpy(cpf, buffer); /*Copia o conteúdo do buffer para cpf*/

  for(int i = 0; i < num_cadastros; i++) { /*Caso o CPF seja encontrado dentro do armazenamento, não será possível prosseguir com o novo cadastro*/
    if(strcmp(cadastro[i].cpf, cpf) == 0) {
      printf("\nCPF já cadastrado.\n\n");
      return -1;
    }
  }

  do {
    printf("Digite o tipo de conta (A - Comum ou B - Plus): ");
    fgets(buffer, sizeof(buffer), stdin);
    buffer[strcspn(buffer, "\n")] = 0;
    char tipo_conta = tolower(buffer[0]);/*Transformo o que foi digitado em minusculo para futuras verificações e não influencie no decorrer do código*/

    /*Caso a conta não for digitado como uma das opções informadas, pedirá para o usuário digitar até que seja válido*/
    if (tipo_conta == 'a') {
      strcpy(conta, "Comum"); /*Se for 'A', a conta = Comum*/
    } else if (tipo_conta == 'b') {
      strcpy(conta, "Plus"); /*Se for 'B', a conta = Plus*/
    } else {
      printf("\nEntrada inválida. Por favor, digite A para Conta Comum ou B para Conta Plus.\n\n");
    }
  } while (strcmp(conta, "Comum") != 0 && strcmp(conta, "Plus") != 0);

  int num; /*A variável num será responsável por validar se o usuário digitou um numero e não uma letra*/
  do {
    printf("Digite o saldo inicial: R$ ");
    num = scanf("%lf", &saldo);
    while (getchar() != '\n');
    if (num == 0) { /*Caso a variável receber alguma letra, retornará 0 que signifca falso na linguagem C, e solicitará o usuário digitar novamente*/
      printf("\nEntrada inválida. Por favor, digite um número.\n\n");
      }
  } while (num == 0);

  printf("Digite a senha: ");
  fgets(buffer, sizeof(buffer), stdin);
  buffer[strcspn(buffer, "\n")] = 0; /*Remove a nova linha no final, se houver*/
  strcpy(senha, buffer); /* Copia o conteúdo do buffer para senha)*/
  
  strcpy(cadastro[num_cadastros].nome, nome);
  strcpy(cadastro[num_cadastros].cpf, cpf);
  strcpy(cadastro[num_cadastros].conta, conta);
  cadastro[num_cadastros].saldo = saldo;
  strcpy(cadastro[num_cadastros].senha, senha);
  cadastro[num_cadastros].num_operacoes = 0;

  num_cadastros++;
  printf("\nCliente cadastrado com sucesso!\n\n");

  return 0;
}

int apaga_cliente() {
  printf("DELETAR CLIENTES\n\n");

  if(num_cadastros == 0) { /*Caso não exista nenhum usuário cadastrado, a variável num_cadastros contém 0 e será informado ao usuário quando essa condição for válida*/
    printf("Nenhum cliente cadastrado.\n\n");
    return -1;
  }
  
  char cpf[12]; /*Variável que irá receber o CPF do cliente*/
  char buffer[50]; /*Variável que receber a entrada do cliente*/

  /*Seguindo a mesma lógica de demais funções, lê a entrada do usuário dentro da variável de entrada e depois a adiciona dentro da variável cpf*/
  printf("Digite o CPF do cliente que deseja deletar: ");
  fgets(buffer, sizeof(buffer), stdin);
  buffer[strcspn(buffer, "\n")] = 0;
  strcpy(cpf, buffer);

  for(int i = 0; i < num_cadastros; i++) { /*Esse laço de repetição percorre todos os clientes cadastrados*/
    if(strcmp(cadastro[i].cpf, cpf) == 0) { /*Se o CPF digitado for igual ao CPF cadastrado */
        for(int j = i; j < num_cadastros - 1; j++) { /*Move todos os CPFs cadastrados uma posição para trás, apagando assim o CPF cadastrados*/
          cadastro[j] = cadastro[j + 1];
        }
        num_cadastros--; /*E a variável que armazena o numero de cadastros diminui 1 na contagem*/
        printf("\nCliente deletado com sucesso!\n\n");
        return 0;
    }
  }
  printf("\nCliente não encontrado.\n\n"); /*Caso o laço percorrer por compelto e não achar o CPF, será informado ao usuário*/
  return -1;
}

int listar_clientes() {
  printf("CLIENTES CADASTRADOS\n\n");
  if(num_cadastros == 0) { /*Caso não exista nenhum usuário cadastrado, a variável num_cadastros contém 0 e será informado ao usuário quando essa condição for válida*/
      printf("Nenhum cliente cadastrado.\n\n");
      return -1;
  }
  for(int i = 0; i < num_cadastros; i++) { /*Caso for maior que 0, este laço gerará um loop que percorre o array cadastro que contém o struct com as informações dos clientes, listando elas uma a uma*/
    printf("\n\n");
    printf("Cliente %d\n\n", i+1);
    printf("Nome: %s\n", cadastro[i].nome);
    printf("CPF: %s\n", cadastro[i].cpf);
    printf("Tipo de Conta: %s\n", cadastro[i].conta);
    printf("Saldo: R$ %.2lf\n", cadastro[i].saldo);
  }
  printf("\n");
  return 0;
}

int verifica_cpf_senha(char *cpf, char *senha) { /*Essa função tem como objetivo validar se o CPF e Senha estão corretos com o cadastrado, para assim permir ou não a execução do restante do programa*/
  for(int i = 0; i < num_cadastros; i++) {
    if(strcmp(cadastro[i].cpf, cpf) == 0 && strcmp(cadastro[i].senha, senha) == 0) { /*Retorna 0 se amabas variáveis forem iguais, sendo o método usado para validação*/
      return 1; /*Retorna o indice do cliente dentro do array se o CPF e Senha estiverem corretos caso for encontrado o cadastro com essa condição*/
    }
  }
  return -1; /*Retorna -1 caso um ou ambos dados não estiverem corretos*/
}

int verifica_cpf(char *cpf) { /*Essa função tem como objetivo validar se o CPF está correto com o cadastrado, para assim permir ou não a execução do restante do programa*/
  for(int i = 0; i < num_cadastros; i++) {
    if(strcmp(cadastro[i].cpf, cpf) == 0) { /*Retorna 0 se amabas variáveis forem iguais, sendo o método usado para validação*/
      return i; /*Retorna o indice do cliente dentro do array se o CPF estiver correto caso for encontrado o cadastro com essa condição*/
    }
  }
  return -1; /*Retorna -1 caso um ou ambos dados não estiverem corretos*/
}

int debito() {
  printf("DEBITO\n\n");

  if(num_cadastros == 0) { /*Caso não exista nenhum usuário cadastrado, a variável num_cadastros contém 0 e será informado ao usuário quando essa condição for válida*/
    printf("Nenhum cliente cadastrado.\n\n");
    return -1;
  }

  char cpf[12]; /*Variável responsável pelo armazenamento do CPF*/
  char senha[11]; /*Variável responsável pelo armazenamento da senha*/
  double valor; /*Variável que vai recebr o valor do débito*/
  char buffer[50]; /*Variável que recebe a entrada temporária dos usuários*/
  int num; /*Variável para validção se o valor da transação é um número*/

  /*As duas entradas abaixo seguem a mesma lógica por trás das entradas da função novo_cliente()*/
  printf("Digite o CPF: ");
  fgets(buffer, sizeof(buffer), stdin);
  buffer[strcspn(buffer, "\n")] = 0;
  strcpy(cpf, buffer);

  printf("Digite a senha: ");
  fgets(buffer, sizeof(buffer), stdin);
  buffer[strcspn(buffer, "\n")] = 0;
  strcpy(senha, buffer);

  do {
    printf("Digite o valor a ser debitado: R$ ");
    num = scanf("%lf", &valor);
    while (getchar() != '\n');
    if (num == 0) {
      printf("\nEntrada inválida. Por favor, digite um número.\n\n");
    }
  } while (num == 0);

  int cliente_indice = verifica_cpf_senha(cpf, senha); /*A variável cliente_indice recebe a posição dentro do array que o cpf e senha foram encontrados*/

  if(cliente_indice != -1) { /*E a operação só será executada se o indice for diferente de -1, que é o retorno da função verifica_cpf_senha() caso não seja encontrado a condição*/
    double taxa; /*A variável taxa recebe o valor da taxa do cliente*/
    double limite; /*A variável limite recebe o valor máximo de limite negativo do cliente*/
    if(strcmp(cadastro[cliente_indice].conta, "Comum") == 0) { /*Se a conta do cliente for o mesmo que "Comum", segue as condições abaixo*/
      taxa = 0.05;
      limite = -1000.0;
    } else if(strcmp(cadastro[cliente_indice].conta, "Plus") == 0) { /*Se a conta do cliente for o mesmo que "Plus", segue as condições abaixo*/
      taxa = 0.03;
      limite = -5000.0;
    }
    double debito = valor * (1 + taxa); /*O valor do débito é o resultado + a cobrança da taxa*/
    if(cadastro[cliente_indice].saldo - debito >= limite) { /*Se o saldo - o débito não ultrapassar o liminte negativo, é possível realizar a operação*/
      cadastro[cliente_indice].saldo -= debito;
      printf("\nDébito realizado com sucesso! Seu novo saldo é R$ %.2f\n\n", cadastro[cliente_indice].saldo);
      return 0;
    } else {
      printf("\nNão foi possível realizar o débito. O saldo ficaria abaixo do limite permitido.\n\n");
      return -1;
    }

  } else { /*Caso a função verifica_cpf_senha() for = -1, a senha ou CPF foram informados incorretamente*/
    printf("CPF ou senha incorretos.\n");
    return -1;
  }
  return -1;
}

int deposito() {
  printf("DEPOSITO\n\n");

  if(num_cadastros == 0) { /*Caso não exista nenhum usuário cadastrado, a variável num_cadastros contém 0 e será informado ao usuário quando essa condição for válida*/
    printf("Nenhum cliente cadastrado.\n\n");
    return -1;
  }

  char cpf[12]; /*Variável que armazena o CPF do cliente*/
  double valor; /*Variável que armazena o valor do depósito*/
  char buffer[50]; /*Variável que armazena a entrada do cliente*/
  int num; /*Variável usada para validação numérica*/

  /*Mesma lógica de entrada das funções anteriores*/
  printf("Digite o CPF: ");
  fgets(buffer, sizeof(buffer), stdin);
  buffer[strcspn(buffer, "\n")] = 0;
  strcpy(cpf, buffer);

  do { /*Caso o valor não for um número, não será possível prosseguir atéser digitado um número*/
    printf("Digite o valor a ser depositado: R$ ");
    num = scanf("%lf", &valor);
    while (getchar() != '\n');
    if (num == 0) {
      printf("\nEntrada inválida. Por favor, digite um número.\n\n");
    }
  } while (num == 0);

  int cliente_indice = verifica_cpf(cpf); /*A variável cliente_indice recebe a posição do CPF encontrado dentro do array*/

  if(cliente_indice != -1) { /*Se o cliente for encontrado, será adicionado a variável saldo o valor informado para o usuário*/
    cadastro[cliente_indice].saldo += valor;
    printf("\nDepósito realizado com sucesso! Seu novo saldo é R$ %.2f\n\n", cadastro[cliente_indice].saldo);
    return 0;

  } else { /*Caso o CPF não estiver cadastrado, será informado ao usuário*/
    printf("CPF incorreto.\n\n");
    return -1;
  }
  return -1;
}

int extrato(){
  return printf("Ok!\n\n");
}

int transferencia(){
  return printf("Ok!\n\n");
}